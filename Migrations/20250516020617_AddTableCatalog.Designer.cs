// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backTOT.Data;

#nullable disable

namespace backTOT.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250516020617_AddTableCatalog")]
    partial class AddTableCatalog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backTOT.Entitys.Carts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Course_id")
                        .HasColumnType("int");

                    b.Property<int>("Users_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Course_id");

                    b.HasIndex("Users_id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("backTOT.Entitys.Catalogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DesEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesVI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("backTOT.Entitys.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisLikes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Lesson_id")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("Parent_id")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Lesson_id");

                    b.HasIndex("Parent_id");

                    b.HasIndex("User_id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("backTOT.Entitys.CourseOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("course_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("course_id")
                        .IsUnique();

                    b.ToTable("CourseOff");
                });

            modelBuilder.Entity("backTOT.Entitys.CourseTeachers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("CourseTeachers");
                });

            modelBuilder.Entity("backTOT.Entitys.Courses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<int>("CountDay")
                        .HasColumnType("int");

                    b.Property<string>("DesEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesVI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Num")
                        .HasColumnType("int");

                    b.Property<string>("TitleEN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TitleVI")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("backTOT.Entitys.Enrollments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Courses_id")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("End_date")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Start_date")
                        .HasColumnType("date");

                    b.Property<int>("Student_id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("created_ad")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Courses_id");

                    b.HasIndex("Student_id");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("backTOT.Entitys.Lesson_notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Lesson_id")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Video_time")
                        .HasColumnType("time");

                    b.Property<DateOnly>("created_ad")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Lesson_id");

                    b.HasIndex("User_id");

                    b.ToTable("Lesson_notes");
                });

            modelBuilder.Entity("backTOT.Entitys.Lessons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Completed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DesEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesVI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Section_id")
                        .HasColumnType("int");

                    b.Property<string>("TitleEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleVI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Section_id");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("backTOT.Entitys.Plans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DesEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesVI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("TitleEN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TitleVI")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TrialPeriodDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30);

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("backTOT.Entitys.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("Star")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("backTOT.Entitys.Schedules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Class_time")
                        .HasColumnType("date");

                    b.Property<int>("Courses_id")
                        .HasColumnType("int");

                    b.Property<int>("Lessons_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Courses_id");

                    b.HasIndex("Lessons_id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("backTOT.Entitys.Scores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Courses_id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date_taken")
                        .HasColumnType("date");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Student_id")
                        .HasColumnType("int");

                    b.Property<string>("Test_name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Courses_id");

                    b.HasIndex("Student_id");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("backTOT.Entitys.Sections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Courses_id")
                        .HasColumnType("int");

                    b.Property<string>("DesEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesVI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("TitleEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleVI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Courses_id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("backTOT.Entitys.User_plans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("End_date")
                        .HasColumnType("date");

                    b.Property<int>("Plan_id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Start_date")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("ACTIVE");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("created_ad")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Plan_id");

                    b.HasIndex("User_id");

                    b.ToTable("User_plans");
                });

            modelBuilder.Entity("backTOT.Entitys.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Des")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("USER");

                    b.Property<DateOnly>("created_ad")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backTOT.Entitys.Carts", b =>
                {
                    b.HasOne("backTOT.Entitys.Courses", "course")
                        .WithMany("Carts")
                        .HasForeignKey("Course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backTOT.Entitys.Users", "users")
                        .WithMany("Carts")
                        .HasForeignKey("Users_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("users");
                });

            modelBuilder.Entity("backTOT.Entitys.Comments", b =>
                {
                    b.HasOne("backTOT.Entitys.Lessons", "lessons")
                        .WithMany("Comments")
                        .HasForeignKey("Lesson_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backTOT.Entitys.Comments", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("Parent_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backTOT.Entitys.Users", "users")
                        .WithMany("Comments")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("lessons");

                    b.Navigation("users");
                });

            modelBuilder.Entity("backTOT.Entitys.CourseOff", b =>
                {
                    b.HasOne("backTOT.Entitys.Courses", "courses")
                        .WithOne("courseOff")
                        .HasForeignKey("backTOT.Entitys.CourseOff", "course_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("courses");
                });

            modelBuilder.Entity("backTOT.Entitys.CourseTeachers", b =>
                {
                    b.HasOne("backTOT.Entitys.Courses", "Course")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backTOT.Entitys.Users", "Teacher")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("backTOT.Entitys.Courses", b =>
                {
                    b.HasOne("backTOT.Entitys.Catalogs", "catalogs")
                        .WithMany("Courses")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("catalogs");
                });

            modelBuilder.Entity("backTOT.Entitys.Enrollments", b =>
                {
                    b.HasOne("backTOT.Entitys.Courses", "courses")
                        .WithMany("Enrollments")
                        .HasForeignKey("Courses_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backTOT.Entitys.Users", "user")
                        .WithMany("Enrollments")
                        .HasForeignKey("Student_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("courses");

                    b.Navigation("user");
                });

            modelBuilder.Entity("backTOT.Entitys.Lesson_notes", b =>
                {
                    b.HasOne("backTOT.Entitys.Lessons", "lessons")
                        .WithMany("Lesson_notes")
                        .HasForeignKey("Lesson_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backTOT.Entitys.Users", "users")
                        .WithMany("Lesson_notes")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("lessons");

                    b.Navigation("users");
                });

            modelBuilder.Entity("backTOT.Entitys.Lessons", b =>
                {
                    b.HasOne("backTOT.Entitys.Sections", "sections")
                        .WithMany("Lessons")
                        .HasForeignKey("Section_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sections");
                });

            modelBuilder.Entity("backTOT.Entitys.Reviews", b =>
                {
                    b.HasOne("backTOT.Entitys.Courses", "courses")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backTOT.Entitys.Users", "users")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("courses");

                    b.Navigation("users");
                });

            modelBuilder.Entity("backTOT.Entitys.Schedules", b =>
                {
                    b.HasOne("backTOT.Entitys.Courses", "courses")
                        .WithMany("Schedules")
                        .HasForeignKey("Courses_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backTOT.Entitys.Lessons", "lessons")
                        .WithMany("Schedules")
                        .HasForeignKey("Lessons_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("courses");

                    b.Navigation("lessons");
                });

            modelBuilder.Entity("backTOT.Entitys.Scores", b =>
                {
                    b.HasOne("backTOT.Entitys.Courses", "courses")
                        .WithMany("Scores")
                        .HasForeignKey("Courses_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backTOT.Entitys.Users", "user")
                        .WithMany("Scores")
                        .HasForeignKey("Student_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("courses");

                    b.Navigation("user");
                });

            modelBuilder.Entity("backTOT.Entitys.Sections", b =>
                {
                    b.HasOne("backTOT.Entitys.Courses", "courses")
                        .WithMany("Sections")
                        .HasForeignKey("Courses_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("courses");
                });

            modelBuilder.Entity("backTOT.Entitys.User_plans", b =>
                {
                    b.HasOne("backTOT.Entitys.Plans", "plans")
                        .WithMany("User_Plans")
                        .HasForeignKey("Plan_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backTOT.Entitys.Users", "users")
                        .WithMany("User_Plans")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plans");

                    b.Navigation("users");
                });

            modelBuilder.Entity("backTOT.Entitys.Catalogs", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("backTOT.Entitys.Comments", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("backTOT.Entitys.Courses", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("CourseTeachers");

                    b.Navigation("Enrollments");

                    b.Navigation("Reviews");

                    b.Navigation("Schedules");

                    b.Navigation("Scores");

                    b.Navigation("Sections");

                    b.Navigation("courseOff")
                        .IsRequired();
                });

            modelBuilder.Entity("backTOT.Entitys.Lessons", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Lesson_notes");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("backTOT.Entitys.Plans", b =>
                {
                    b.Navigation("User_Plans");
                });

            modelBuilder.Entity("backTOT.Entitys.Sections", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("backTOT.Entitys.Users", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Comments");

                    b.Navigation("CourseTeachers");

                    b.Navigation("Enrollments");

                    b.Navigation("Lesson_notes");

                    b.Navigation("Reviews");

                    b.Navigation("Scores");

                    b.Navigation("User_Plans");
                });
#pragma warning restore 612, 618
        }
    }
}
